let sheetData = [339462,
    339493,
    340333,
    340578,
    340606,
    340619,
    340667,
    340742,
    340839,
    340868,
    340957,
    340982,
    341000,
    341047,
    341084,
    341085,
    341099,
    341106,
    341126,
    341163,
    341171,
    341179,
    341190,
    341199,
    341202,
    341211,
    341233,
    341246,
    341319,
    341372,
    341375,
    341385,
    341386,
    341410,
    341424,
    341433,
    341451,
    341454,
    341473,
    341488,
    341507,
    341517,
    341522,
    341538,
    341542,
    341545,
    341552,
    341559,
    341605,
    341614,
    341625,
    341626,
    341627,
    341628,
    341634,
    341636,
    341643,
    341644,
    341647,
    341651,
    341652,
    341661,
    341662,
    341667,
    341668,
    341674,
    341675,
    341676,
    341680,
    341682,
    341690,
    341692,
    341694,
    341706,
    341708,
    341720,
    341723,
    341724,
    341728,
    341735,
    341737,
    341740,
    341741,
    341742,
    341743,
    341745,
    341750,
    341751,
    341752,
    341755,
    341759,
    341761,
    341764,
    341766,
    341770,
    341771,
    341772,
    341787,
    341788,
    341789,
    341790,
    341791,
    341792,
    341794,
    341796,
    341797,
    341798,
    341800,
    341802,
    341804,
    341805,
    341808,
    341815,
    341817,
    341818,
    341819,
    341821,
    341822,
    341823,
    341824,
    341826,
    341827,
    341830,
    341832,
    341834,
    341836,
    341837,
    341838,
    341839,
    341841,
    341842,
    341843,
    341844,
    341845,
    341847,
    341848,
    341849,
    341851,
    341855,
    341860,
    341863,
    341864,
    341865,
    341866,
    341867,
    341868,
    341869,
    341870,
    341871,
    341872,
    341874,
    341877,
    341879,
    341880,
    341881,
    341882,
    341883,
    341885,
    341886,
    341888,
    341889,
    341890,
    341891,
    341892,
    341893,
    341894,
    341895,
    341896,
    341897,
    341899,
    341901,
    341903,
    341904,
    341905,
    341906,
    341907,
    341908,
    341909,
    341910,
    341911,
    341912,
    341913,
    341914,
    341915,
    341916,
    341917,
    341918,
    341920,
    341921,
    341922,
    341923,
    341924,
    341925,
    341926,
    341927,
    341928,
    341929,
    341930,
    341931,
    341932,
    341933,
    341934,
    341935,
    341936,
    341937,
    341938,
    341939,
    341940,
    4300068176,
    4300068176,
    4300068176,
    4300068177,
    4300068177,
    4300068180,
    4300068180,
    4300068181,
    4300068181,
    4300068182,
    4300068183,
    4300068184,
    4300068186,
    4300068186,
    4300068188,
    4300068188,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068165,
    4300068166,
    4300068166,
    4300068166,
    4300068166,
    4300068166,
    4300068166,
    4300068166,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068167,
    4300068170,
    4300068170,
    4300068170,
    4300068170,
    4300068170,
    4300068170,
    4300068172,
    4300068172,
    4300068172,
    4300068172,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068173,
    4300068174,
    4300068174,
    4300068174,
    4300068174,
    4300068174,
    4300068174,
    4300068174,
    4300068174,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068175,
    4300068146,
    4300068146,
    4300068147,
    4300068147,
    4300068147,
    4300068147,
    4300068147,
    4300068147,
    4300068147,
    4300068148,
    4300068148,
    4300068148,
    4300068149,
    4300068149,
    4300068149,
    4300068149,
    4300068149,
    4300068149,
    4300068149,
    4300068149,
    4300068151,
    4300068151,
    4300068151,
    4300068151,
    4300068151,
    4300068151,
    4300068151,
    4300068151,
    4300068152,
    4300068152,
    4300068152,
    4300068152,
    4300068152,
    4300068152,
    4300068154,
    4300068154,
    4300068154,
    4300068154,
    4300068154,
    4300068154,
    4300068154,
    4300068154,
    4300068155,
    4300068155,
    4300068155,
    4300068155,
    4300068155,
    4300068157,
    4300068157,
    4300068157,
    4300068157,
    4300068157,
    4300068157,
    4300068157,
    4300068158,
    4300068158,
    4300068158,
    4300068158,
    4300068158,
    4300068159,
    4300068159,
    4300068159,
    4300068159,
    4300068159,
    4300068160,
    4300068160,
    4300068160,
    4300068160,
    4300068160,
    4300068160,
    4300068160,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068161,
    4300068162,
    4300068162,
    4300068162,
    4300068162,
    4300068162,
    4300068164,
    4300068164,
    4300068164,
    4300068164,
    4300068164,
    4300068164,
    4300068133,
    4300068133,
    4300068133,
    4300068133,
    4300068133,
    4300068133,
    4300068133,
    4300068133,
    4300068134,
    4300068134,
    4300068134,
    4300068134,
    4300068135,
    4300068135,
    4300068135,
    4300068135,
    4300068136,
    4300068136,
    4300068136,
    4300068136,
    4300068137,
    4300068137,
    4300068137,
    4300068138,
    4300068139,
    4300068140,
    4300068141,
    4300068142,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068143,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068116,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068118,
    4300068119,
    4300068119,
    4300068119,
    4300068119,
    4300068119,
    4300068119,
    4300068119,
    4300068119,
    4300068120,
    4300068120,
    4300068120,
    4300068121,
    4300068121,
    4300068121,
    4300068121,
    4300068121,
    4300068121,
    4300068122,
    4300068122,
    4300068122,
    4300068122,
    4300068124,
    4300068124,
    4300068124,
    4300068124,
    4300068125,
    4300068125,
    4300068125,
    4300068125,
    4300068125,
    4300068125,
    4300068127,
    4300068127,
    4300068127,
    4300068127,
    4300068127,
    4300068127,
    4300068128,
    4300068128,
    4300068128,
    4300068106,
    4300068106,
    4300068106,
    4300068106,
    4300068106,
    4300068106,
    4300068106,
    4300068107,
    4300068107,
    4300068107,
    4300068107,
    4300068107,
    4300068107,
    4300068108,
    4300068108,
    4300068108,
    4300068113,
    4300068113,
    4300068113,
    4300068113,
    4300068113,
    4300068113,
    4300068113,
    4300068114,
    4300068114,
    4300068114,
    4300068114,
    4300068114,
    4300068114,
    4300068114,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067880,
    4300067884,
    4300067884,
    4300067884,
    4300067884,
    4300067884,
    4300067854,
    4300067787,
    4300067745,
    4300067745,
    4300067745,
    4300067745,
    4300067749,
]
sheetData = JSON.stringify(sheetData)

const rp = require("request-promise")
const fs = require("fs")
const _ = require("lodash")
const TOKEN = "Bearer eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2ODkwNTkwOTEsInVzZXJJZCI6ImJvdHVzZXItLWNhNDFkYjExLWEwZTktNDk5Yy1hNTY0LTdlOGNhYzc3MDc2NiIsIm1vYmlsZU51bWJlciI6ImJvdHVzZXItLWNhNDFkYjExLWEwZTktNDk5Yy1hNTY0LTdlOGNhYzc3MDc2NiIsIm9yZ0lkIjoiM2U0Y2RlZTktMGIzYi00NmRkLTliOTgtZGYwZTM4YTAyNzFjIiwibmFtZSI6InN5c3RlbSBJbnRlZ3JhdGlvbiIsIm9yZ1R5cGUiOiJGTEVFVF9PV05FUiIsImlzR29kIjpmYWxzZSwicG9ydGFsVHlwZSI6ImJhc2ljIn0.2xj1_aLpE5RdY2iauSfFyHw6_rhnkUmfBT3kA2qvMCw"

async function getOrderByFilter(filter) {
    try {
        let url = `https://apis.fretron.com/shipment-view/sales/v2/orders?limit=1500&filters=${encodeURIComponent(JSON.stringify(filter))}&source=["orderNumber", "uuid", "externalId"]`
        console.log(url)
        let res = await rp({
            uri: url,
            method: "GET",
            json: true,
            headers: {
                authorization: TOKEN
            }
        })
        if (res.length) {
            return res
        }

    } catch (e) {
        console.log(`error in getting orders ${e.message}`)
    }
}

async function closeOrderForefully(orderId) {
    try {
        let url = `https://apis.fretron.com/order-manager-v2/sales-orders/v1/order/${orderId}/closeOrder`;
        let res = await rp({
            uri: url,
            method: "PUT",
            json: true,
            body: { "isForeClose": true },
            headers: {
                Authorization: TOKEN,
            }
        })

        if (res?.status == 200) {
            console.log(`order closed successfully ${orderId}`)
        } else {
            console.log(`Error in order ${orderId}`)
            console.log(JSON.stringify(res))
        }
    } catch (e) {
        console.log(`error in closing order ${e.message}`)
    }
    return null
}

async function main() {
    try {
        // let filter = { "orderDate": { "from": 1641026280000, "till": 1688106540000 }, "status": ["OPEN"] }
        // let orderRes = await getOrderByFilter(filter)
        // console.log(orderRes?.length)


        // fs.writeFileSync("OPENORDERS.txt", JSON.stringify(orderRes))

        let openOrders = JSON.parse(fs.readFileSync("openOrder2.txt", "utf8"));
        console.log(openOrders.length)
        let count = 0
        let closeCount = 0
        let closedData = []
        for (let item of openOrders) {
            let uuid = item.uuid
            let orderNo = item.orderNumber
            let extId = item.externalId
            console.log(`orderNo ${orderNo}`)
            if (sheetData.includes(extId)) {
                count += 1
                console.log(`order extid exist in sheet data ${extId}`)
            } else {
                await closeOrderForefully(uuid)
                closeCount += 1
                closedData.push(extId)
            }
        }
        console.log(JSON.stringify(closedData))
        console.log(`Total exist order in sheet ${count}`)
        console.log(`Total closed Count ${closeCount}`)


    } catch (e) {
        console.log(`Error in main ${e.message}`)
    }
}


try {
    main()
} catch (e) {
    console.log(`Error in main ${e.message}`)
}